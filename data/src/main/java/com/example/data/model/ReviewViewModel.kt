package com.example.data.model

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.data.ClasesRelacionales.Rese침aConUsuarioYJuego
import com.example.data.database.Rese침a
import com.example.data.repository.ReviewsRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import android.util.Log

class ReviewViewModel(private val repository: ReviewsRepository) : ViewModel() {

    private val _rese침as = MutableStateFlow<List<Rese침a>>(emptyList())
    val rese침as: StateFlow<List<Rese침a>> get() = _rese침as

    private val _rese침asConUsuario = MutableStateFlow<List<Rese침aConUsuarioYJuego>>(emptyList())
    val rese침asConUsuario: StateFlow<List<Rese침aConUsuarioYJuego>> get() = _rese침asConUsuario

    fun addRese침a(resena: Rese침a) {
        viewModelScope.launch {
            try {
                Log.d("ReviewViewModel", "Iniciando inserci칩n de rese침a: $resena")

                // 游댠 USAR insertAndRecalcularPromedio que maneja Room + Firebase + rec치lculo
                repository.insertAndRecalcularPromedio(resena)

                Log.d("ReviewViewModel", "Rese침a insertada exitosamente")

                // Actualizar los estados despu칠s de la inserci칩n exitosa
                _rese침as.value = repository.getRese침aPorJuego(resena.videojuegoId)
                _rese침asConUsuario.value = repository.getRese침aConUsuario(resena.videojuegoId)

                Log.d("ReviewViewModel", "Estados actualizados: ${_rese침as.value.size} rese침as totales")

            } catch (e: Exception) {
                Log.e("ReviewViewModel", "Error al insertar rese침a: ${e.message}", e)
                // Re-lanzar la excepci칩n para que la UI pueda manejarla
                throw e
            }
        }
    }

    fun updateRese침a(resena: Rese침a) {
        viewModelScope.launch {
            try {
                Log.d("ReviewViewModel", "Actualizando rese침a: ${resena.id}")

                repository.update(resena)
                repository.recalcularPromedioYActualizarJuego(resena.videojuegoId)

                // Actualizar estados
                _rese침as.value = repository.getRese침aPorJuego(resena.videojuegoId)
                _rese침asConUsuario.value = repository.getRese침aConUsuario(resena.videojuegoId)

                Log.d("ReviewViewModel", "Rese침a actualizada exitosamente")

            } catch (e: Exception) {
                Log.e("ReviewViewModel", "Error al actualizar rese침a: ${e.message}", e)
                throw e
            }
        }
    }

    fun deleteRese침a(resena: Rese침a) {
        viewModelScope.launch {
            try {
                Log.d("ReviewViewModel", "Eliminando rese침a: ${resena.id}")

                repository.delete(resena)
                repository.recalcularPromedioYActualizarJuego(resena.videojuegoId)

                // Actualizar estados
                _rese침as.value = repository.getRese침aPorJuego(resena.videojuegoId)
                _rese침asConUsuario.value = repository.getRese침aConUsuario(resena.videojuegoId)

                Log.d("ReviewViewModel", "Rese침a eliminada exitosamente")

            } catch (e: Exception) {
                Log.e("ReviewViewModel", "Error al eliminar rese침a: ${e.message}", e)
                throw e
            }
        }
    }

    fun getReviewPorJuego(juegoId: Int) {
        viewModelScope.launch {
            try {
                Log.d("ReviewViewModel", "Obteniendo rese침as para juego: $juegoId")

                _rese침as.value = repository.getRese침aPorJuego(juegoId)
                _rese침asConUsuario.value = repository.getRese침aConUsuario(juegoId)

                Log.d("ReviewViewModel", "Obtenidas ${_rese침as.value.size} rese침as para el juego $juegoId")

            } catch (e: Exception) {
                Log.e("ReviewViewModel", "Error al obtener rese침as: ${e.message}", e)
            }
        }
    }

    fun getTodasLasRese침as() {
        viewModelScope.launch {
            try {
                Log.d("ReviewViewModel", "Obteniendo todas las rese침as")

                _rese침asConUsuario.value = repository.getRese침aConUsuarioYJuego()

                Log.d("ReviewViewModel", "Obtenidas ${_rese침asConUsuario.value.size} rese침as totales")

            } catch (e: Exception) {
                Log.e("ReviewViewModel", "Error al obtener todas las rese침as: ${e.message}", e)
            }
        }
    }

    // 游댠 NUEVA: Funci칩n para refrescar las rese침as despu칠s de operaciones externas
    fun refreshRese침as(juegoId: Int) {
        viewModelScope.launch {
            try {
                _rese침as.value = repository.getRese침aPorJuego(juegoId)
                _rese침asConUsuario.value = repository.getRese침aConUsuario(juegoId)
            } catch (e: Exception) {
                Log.e("ReviewViewModel", "Error al refrescar rese침as: ${e.message}", e)
            }
        }
    }
}