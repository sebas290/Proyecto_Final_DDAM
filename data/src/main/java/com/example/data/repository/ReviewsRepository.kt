package com.example.data.repository

import com.example.data.ClasesRelacionales.Rese침aConUsuarioYJuego
import com.example.data.dao.JuegoDao
import com.example.data.dao.Rese침aDao
import com.example.data.database.Rese침a
import com.google.firebase.firestore.CollectionReference
import kotlinx.coroutines.tasks.await
import android.util.Log

class ReviewsRepository(
    private val rese침aDao: Rese침aDao,
    private val juegoDao: JuegoDao,
    private val rese침asCollection: CollectionReference
) {

    // Funci칩n para convertir Rese침a a Map compatible con Firebase
    private fun rese침aToFirebaseMap(rese침a: Rese침a): Map<String, Any?> {
        return mapOf(
            "roomId" to rese침a.id, // 游댠 NUEVO: Guardar el ID de Room
            "usuarioId" to rese침a.usuarioId,
            "videojuegoId" to rese침a.videojuegoId,
            "estrellas" to rese침a.estrellas,
            "comentario" to rese침a.comentario,
            "fecha" to rese침a.fecha.toString()
        )
    }

    suspend fun insert(rese침a: Rese침a) {
        try {
            // 1. Insertar en Room y obtener el ID autogenerado
            val roomId = rese침aDao.insert(rese침a)
            val rese침aConId = rese침a.copy(id = roomId.toInt())

            // 2. Insertar en Firebase usando add() para generar ID 칰nico
            val documentRef = rese침asCollection.add(rese침aToFirebaseMap(rese침aConId)).await()

            Log.d("ReviewsRepository", "Rese침a insertada: Room ID=$roomId, Firebase ID=${documentRef.id}")
        } catch (e: Exception) {
            Log.e("ReviewsRepository", "Error al insertar rese침a", e)
            throw e
        }
    }

    suspend fun update(rese침a: Rese침a) {
        try {
            // Actualizar en Room
            rese침aDao.update(rese침a)

            // 游댠 PROBLEMA: Necesitas mapear Room ID con Firebase ID
            // Para simplificar, vamos a buscar y actualizar por roomId
            val querySnapshot = rese침asCollection
                .whereEqualTo("roomId", rese침a.id)
                .get()
                .await()

            if (!querySnapshot.isEmpty) {
                val document = querySnapshot.documents.first()
                document.reference.set(rese침aToFirebaseMap(rese침a)).await()
                Log.d("ReviewsRepository", "Rese침a actualizada correctamente")
            } else {
                Log.w("ReviewsRepository", "No se encontr칩 la rese침a en Firebase con roomId: ${rese침a.id}")
            }

        } catch (e: Exception) {
            Log.e("ReviewsRepository", "Error al actualizar rese침a", e)
            throw e
        }
    }

    suspend fun delete(rese침a: Rese침a) {
        try {
            // Borrar de Room
            rese침aDao.delete(rese침a)

            // Borrar de Firebase buscando por roomId
            val querySnapshot = rese침asCollection
                .whereEqualTo("roomId", rese침a.id)
                .get()
                .await()

            for (document in querySnapshot.documents) {
                document.reference.delete().await()
            }

            Log.d("ReviewsRepository", "Rese침a eliminada correctamente de Room y Firebase")
        } catch (e: Exception) {
            Log.e("ReviewsRepository", "Error al eliminar rese침a", e)
            throw e
        }
    }

    // 游댠 NUEVA FUNCI칍N: Borrar todas las rese침as de un juego espec칤fico
    suspend fun deleteRese침asPorJuego(juegoId: Int) {
        try {
            // 1. Obtener todas las rese침as del juego desde Room
            val rese침as = rese침aDao.getRese침asPorJuego(juegoId)

            // 2. Borrar cada rese침a individualmente (esto maneja Room + Firebase)
            for (rese침a in rese침as) {
                delete(rese침a) // Usa la funci칩n delete que ya maneja ambos
            }

            Log.d("ReviewsRepository", "Eliminadas ${rese침as.size} rese침as del juego $juegoId")
        } catch (e: Exception) {
            Log.e("ReviewsRepository", "Error al eliminar rese침as del juego $juegoId", e)
            throw e
        }
    }

    suspend fun getRese침aPorJuego(juegoId: Int): List<Rese침a> = rese침aDao.getRese침asPorJuego(juegoId)

    suspend fun getRese침aPorUsuario(usuarioId: Int): List<Rese침a> = rese침aDao.getRese침asPorUsuario(usuarioId)

    suspend fun getRese침aConUsuario(juegoId: Int): List<Rese침aConUsuarioYJuego> = rese침aDao.getRese침asConUsuario(juegoId)

    suspend fun getRese침aConUsuarioYJuego(): List<Rese침aConUsuarioYJuego> = rese침aDao.getRese침asConUsuarioYJuego()

    // Inserta la rese침a y recalcula el promedio (actualiza la calificaci칩n del juego)
    suspend fun insertAndRecalcularPromedio(rese침a: Rese침a) {
        insert(rese침a) // Ya incluye Room + Firebase
        recalcularPromedioYActualizarJuego(rese침a.videojuegoId)
    }

    suspend fun recalcularPromedioYActualizarJuego(juegoId: Int) {
        val avg = rese침aDao.getAverageEstrellas(juegoId) ?: 0.0
        val juego = juegoDao.getById(juegoId)
        if (juego != null) {
            val actualizado = juego.copy(calificacion = avg)
            juegoDao.update(actualizado)
        }
    }
}